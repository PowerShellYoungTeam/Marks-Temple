name: Publish Module

on:
    release:
      types: [created]

jobs:
  publish:
    name: Publish to PowerShell Gallery
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PowerShell module cache
        uses: actions/cache@v3
        with:
          path: "~/.local/share/powershell/Modules"
          key: ${{ runner.os }}-ps-modules-${{ hashFiles('**/requirements.psd1') }}

      - name: Install dependencies
        shell: pwsh
        run: |
          Install-Module -Name PowerShellGet -Force -SkipPublisherCheck

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
            Remove-Module PSScriptAnalyzer -Force -ErrorAction SilentlyContinue
            Get-Module PSScriptAnalyzer -ListAvailable | Remove-Module -Force -ErrorAction SilentlyContinue

            # Install a fresh copy
            Install-Module PSScriptAnalyzer -Force -SkipPublisherCheck

            # Verify module is loaded correctly
            Import-Module PSScriptAnalyzer -Force
            Write-Host "PSScriptAnalyzer version: $((Get-Module PSScriptAnalyzer).Version)"

            # List files to be analyzed
            Write-Host "Files to analyze:"
            Get-ChildItem -Path ./src -Recurse | Where-Object { $_.Extension -match 'ps1|psm1|psd1' } | Select-Object FullName

            # Run analyzer with explicit settings and error handling
            try {
            $settingsPath = Join-Path -Path $PWD -ChildPath 'PSScriptAnalyzerSettings.psd1'
            Write-Host "Using settings from: $settingsPath"

            if (Test-Path $settingsPath) {
                $results = Invoke-ScriptAnalyzer -Path ./src -Recurse -Settings $settingsPath -Verbose
            } else {
                Write-Host "Settings file not found, using default settings"
                $results = Invoke-ScriptAnalyzer -Path ./src -Recurse -Verbose
            }

            if ($results) {
            $results | Format-Table
            $errorCount = ($results | Where-Object { $_.Severity -eq 'Error' }).Count

            if ($errorCount -gt 0) {
            throw "PSScriptAnalyzer found $errorCount errors. See output for details."
            } else {
            Write-Host "PSScriptAnalyzer completed with warnings but no errors."
            }
            } else {
            Write-Host "PSScriptAnalyzer completed with no issues found."
            }
            } catch {
                Write-Host "Error running PSScriptAnalyzer: $_"
                throw $_
            }

      - name: Publish module
        shell: pwsh
        env:
          PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
        run: |
          $manifestInfo = Test-ModuleManifest -Path ./src/Build-MarksTemple.psd1
          $version = $manifestInfo.Version
          Write-Host "Publishing module version: $version"

          Publish-Module -Path ./src -NuGetApiKey $env:PSGALLERY_API_KEY -Verbose